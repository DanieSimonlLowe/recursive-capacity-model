// This has a _ in the extension so that it is ignored because it is incomplete.
#pragma once
#include "optimization/HyperparameterOptimizable.h"
#include "ECMStateEstimator.h"
#include "interpolation/interpolatorBase.h"
#include <type_traits>

template<typename  T>
concept ECMEstimatorType = std::is_base_of_v<ECMStateEstimator, T>;

class ECMModelEvaluator: public HyperparameterOptimizable {
    public:
        ECMModelEvaluator(RecursiveLeastSquares* rls, InterpolatorBase* voltageInerpolator, InterpolatorBase* currentInterpolator);

        void setParams(Eigen::VectorXd& params) override;

        size_t getParamsCount() override;
        
        ECMModelEvaluator* clone() override;
        
        std::vector<double> getLowerBounds() override;
        
        std::vector<double> getUpperBounds() override;
        
        void display() override;
        
        double getObjectiveValue();

        void onCharge(const Eigen::VectorXd &voltage,
                            const Eigen::VectorXd &current,
                            const Eigen::VectorXd &temperature,
                            const Eigen::VectorXd &time);

        void onDischarge(const Eigen::VectorXd &voltage,
                                const Eigen::VectorXd &current,
                                const Eigen::VectorXd &temperature,
                                const Eigen::VectorXd &time,
                                const double &capacity);

        void onImpedance(double Rct, double Re);
    
    private:
        RecursiveLeastSquares* rls;
        InterpolatorBase* voltageInerpolator;
        InterpolatorBase* currentInterpolator;
        double deltaTimeMult;
        double deltaTime;

        T* model;

        void processData(const Eigen::VectorXd &voltage,
                        const Eigen::VectorXd &current,
                        const Eigen::VectorXd &time);
};
